package in.ashwanthkumar.gocd.slack.jsonapi;

import com.google.gson.annotations.SerializedName;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Material {
	// Following pattern matches all symbols between last occurence of . and / in a string (https://regex101.com/r/y093Mf/1)
	static private final Pattern REPO_NAME_PATTERN = Pattern.compile("[^\\/.]+(?=\\.[^\\/.]*$)");
	// Following pattern matches all symbols between = and ]
	static private final Pattern S3_NAME_PATTERN = Pattern.compile("\\=(.*?)]");
	
    @SerializedName("id")
    public int id;

    // Format: "Pipeline", etc.
    @SerializedName("type")
    public String type;

    // Format: "zoo" or "git@github.com:foo/bar.git, Branch: master"
    @SerializedName("description")
    public String description;

    //"fingerprint": "d22ec438c20be7f700e2aca7f4f416eef11e5ec2bbcf201c6f03f02ed8b2a6e0",

    public boolean isPipeline() {
        return type.equals("Pipeline");
	}
	
	// Extract the name of repository out of its description
	public String getName() {
		String ret = null;

		Matcher m = REPO_NAME_PATTERN.matcher(this.description);
		
		while (m.find()) {
			ret = m.group(0);
		}

		Matcher m1 = S3_NAME_PATTERN.matcher(this.description);
		
		while (m1.find()) {
			ret = m1.group(1);
		}
		
		return ret;
	}
	
    // Override hashCode and equals with implementations generated by
    // Eclipse so we can compare MaterialRevision objects.

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + id;
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Material other = (Material) obj;
        if (id != other.id)
            return false;
        return true;
    }
}
